/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SudokuGUI.java
 *
 * Created on 23/05/2011, 15:12:03
 */

package frames;

import java.awt.Color;

/**
 *
 * @author daniel
 */

public class SudokuGUI extends javax.swing.JFrame {

    /** Creates new form SudokuGUI */
    public SudokuGUI() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jSudokuGrid = new javax.swing.JTable();
        jSudokuMenuBar = new javax.swing.JMenuBar();
        SudokuMenu = new javax.swing.JMenu();
        Limpar = new javax.swing.JMenuItem();
        Resolver = new javax.swing.JMenuItem();
        ResolverPassos = new javax.swing.JMenuItem();
        Help = new javax.swing.JMenu();
        Sobre = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSudokuGrid.setAutoCreateRowSorter(true);
        jSudokuGrid.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 3));
        jSudokuGrid.setFont(new java.awt.Font("Liberation Serif", 1, 36));
        jSudokuGrid.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, new Integer(7), null, new Integer(4), null, null, null, new Integer(3)},
                {null, null, null, new Integer(6), null, null, new Integer(7), null, new Integer(9)},
                {null, null, null, new Integer(8), new Integer(3), null, null, new Integer(4), null},
                {new Integer(4), new Integer(5), new Integer(1), null, new Integer(2), null, new Integer(6), new Integer(7), new Integer(8)},
                {new Integer(6), new Integer(2), null, null, null, null, null, new Integer(9), new Integer(5)},
                {new Integer(9), new Integer(7), new Integer(8), null, new Integer(6), null, new Integer(3), new Integer(2), new Integer(1)},
                {null, new Integer(9), null, null, new Integer(5), new Integer(8), null, null, null},
                {new Integer(1), null, new Integer(2), null, null, new Integer(3), null, null, null},
                {new Integer(3), null, null, null, new Integer(9), null, new Integer(8), null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", ""
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jSudokuGrid.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        jSudokuGrid.setColumnSelectionAllowed(true);
        jSudokuGrid.setDropMode(javax.swing.DropMode.ON_OR_INSERT_ROWS);
        jSudokuGrid.setFillsViewportHeight(true);
        jSudokuGrid.setGridColor(java.awt.Color.darkGray);
        jSudokuGrid.setMinimumSize(new java.awt.Dimension(135, 300));
        jSudokuGrid.setRowHeight(36);
        jSudokuGrid.setSurrendersFocusOnKeystroke(true);
        sudokuGridRenderer renderer = new sudokuGridRenderer();
        Class column = jSudokuGrid.getColumnClass(1);
        jSudokuGrid.setDefaultRenderer(column, renderer);
        jSudokuGrid.setUpdateSelectionOnSort(false);
        jSudokuGrid.setVerifyInputWhenFocusTarget(false);
        jSudokuGrid.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jSudokuGridKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jSudokuGrid);
        jSudokuGrid.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);

        SudokuMenu.setText("Sudoku");

        Limpar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        Limpar.setText("Limpar");
        Limpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LimparActionPerformed(evt);
            }
        });
        SudokuMenu.add(Limpar);

        Resolver.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        Resolver.setText("Resolver");
        Resolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResolverActionPerformed(evt);
            }
        });
        SudokuMenu.add(Resolver);

        ResolverPassos.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        ResolverPassos.setText("Resolver mostrando passos");
        SudokuMenu.add(ResolverPassos);

        jSudokuMenuBar.add(SudokuMenu);

        Help.setText("Help");

        Sobre.setText("Sobre");
        Sobre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SobreActionPerformed(evt);
            }
        });
        Help.add(Sobre);

        jSudokuMenuBar.add(Help);

        setJMenuBar(jSudokuMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 761, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(92, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(126, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SobreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SobreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SobreActionPerformed

    private void jSudokuGridKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jSudokuGridKeyPressed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_jSudokuGridKeyPressed

    private void LimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LimparActionPerformed
        // TODO add your handling code here:
        
        for(int i=0; i< 9 ; i++){
            for(int j = 0; j< 9; j++){
                jSudokuGrid.setValueAt(null, i, j);
            }
        }
        jSudokuGrid.setFont(new java.awt.Font("Liberation Serif", 1, 36));
    }//GEN-LAST:event_LimparActionPerformed
    private Integer[][] getSudokuMatrix(){
        Integer m[][] = new Integer[9][9] ;

        for (int i = 0; i<9 ; i++){
            for (int j=0; j<9 ; j++){
                if(jSudokuGrid.getValueAt(i, j) != null) {
                    m[i][j] =  (Integer)jSudokuGrid.getValueAt(i, j);
                }else {
                    m[i][j] = 0;
                }
                
            }
        }
        return m;
    }
    private void printSol(Integer m[][]){
        for (int i = 0; i< 9 ; i++){
            for(int j = 0 ; j<9; j++){
                jSudokuGrid.setValueAt(m[i][j], i, j);
            }
        }
    }
    
    private void ResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResolverActionPerformed
        // TODO add your handling code here:

        // Exemplo de como chamar o metodo Resolver
       /*
        for (int i = 0; i < 9 ; i++){
            for (int j=0 ; j< 9; j++){
                if (jSudokuGrid.getValueAt(i, j) == null ){
                    jSudokuGrid.setValueAt(i+1, i, j);
                }
            }
        }
        * 
        */
        Integer sm[][] = getSudokuMatrix();
        System.out.println(sm[0][0]);
        System.out.println(" Adcionou matriz");
        SudokuSolver resolvido = new SudokuSolver(sm);
        System.out.println(" criou resolvido");
        resolvido.solver(0,0);
        System.out.println(" resolveu");
        
        for (int i = 0 ; i < 9 ; i++){
            for (int j = 0 ; j<9 ; j++){
                System.out.println(sm[i][j]);
            }
        }
         
        printSol(resolvido.getSudoku());
        
       
    }//GEN-LAST:event_ResolverActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SudokuGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Help;
    private javax.swing.JMenuItem Limpar;
    private javax.swing.JMenuItem Resolver;
    private javax.swing.JMenuItem ResolverPassos;
    private javax.swing.JMenuItem Sobre;
    private javax.swing.JMenu SudokuMenu;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jSudokuGrid;
    private javax.swing.JMenuBar jSudokuMenuBar;
    // End of variables declaration//GEN-END:variables


    
}
